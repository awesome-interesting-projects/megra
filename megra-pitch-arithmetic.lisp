(in-package :megra)

(defun add (a b)
  (cond
    ((and (typep a 'number) (typep b 'number))
     (+ a b))
    ((and (is-note-name a) (is-note-name b))
     (cm::note (+ (cm::keynum a) (cm::keynum b))))
    ((and (is-note-name a) (typep b 'number))
     (cm::note (+ (cm::keynum a) b)))
    ((and (typep a 'number) (is-note-name b))
     (cm::note (+ a (cm::keynum b))))
    (t (+ a b))))

(defun sub (a b)
  (cond
    ((and (typep a 'number) (typep b 'number))
     (- a b))
    ((and (is-note-name a) (is-note-name b))
     (cm::note (- (cm::keynum a) (cm::keynum b))))
    ((and (is-note-name a) (typep b 'number))
     (cm::note (- (cm::keynum a) b)))
    ((and (typep a 'number) (is-note-name b))
     (cm::note (- a (cm::keynum b))))
    (t (- a b))))

(defun mul (a b)
  (cond
    ((and (typep a 'number) (typep b 'number))
     (* a b))
    ((and (is-note-name a) (is-note-name b))
     (cm::note (* (cm::hertz a) (cm::hertz b)) :hz t))
    ((and (is-note-name a) (typep b 'number))
     (cm::note (* (cm::hertz a) b) :hz t))
    ((and (typep a 'number) (is-note-name b))
     (cm::note (* a (cm::hertz b)) :hz t))
    (t (* a b))))

(defun div (a b)
  (cond
    ((and (typep a 'number) (typep b 'number))
     (/ a b))
    ((and (is-note-name a) (is-note-name b))     
     (cm::note (/ (cm::hertz a) (cm::hertz b)) :hz t))
    ((and (is-note-name a) (typep b 'number))
     (cm::note (/ (cm::hertz a) b) :hz t))
    ((and (typep a 'number) (is-note-name b))
     (cm::note (/ a (cm::hertz b)) :hz t))
    (t (/ a b))))
