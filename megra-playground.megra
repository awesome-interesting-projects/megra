(in-package :megra)

(s 'grod ()
  (prob 50 (rev 0.1))
  (always (pitch 100 :cfun #'add) (dur 50) (atk 1) (rel 40) (filter-lp (oscil 900 1900)))  
  (infer 'glob       
       (events (1 (saw 300)) (3 (saw 50)) (2 (saw 500)))
       (rules ((1) 2 0.5)
	      ((1) 1 .5)
	      ((2) 1 1.0)
	      ((1 2 1 2) 3 1.0)
	      ((3) 1 1.0))
       :dur 100))

(s 'sma ()
   (infer 'bea
	  (events (1 (sine 100 :atk 1 :rel 90 :dur 100)))
	  (rules ((1) 1 1.0))
	  :dur 100))

(s 'la3 ()
  (always (filter-lp 10000))
  (nuc2 'lad4 (perc 'paint) :dur 520))


(s 'la ()
  (always (filter-lp 1000))
  (nuc2 'lad (saw 100 :dur 120 :rel 90 :atk 1) :dur 130))

(s 'larger (:sync-to 'la)
  (slearn 'beat
	  (x (sn) o (bd) - (hats))
	  "x-o-x-o-x-o-x-o-x-o-x-o-x-o-x-o-x-
o-x-o-x-o-x-ox-xo-x--ox-ox--xo-x-xo-xox-ox-oxx-xx-ox" :dur 130))

(stop)

(clear)

(s 'the (:sync-to 'larger)
   (nuc 'nucleus (saw 'a2 :dur 102 :atk 2 :rel 100 :lp-freq 1000 :lp-dist 1.0) :dur 390))

(grow2 'beat :var 0.3 :ord 4 :hist 5)

;; genetic live code ... 
(s 'golb (:sync-to 'larger)
  (always (dur 100) (atk 1) (rel 90) (filter-lp 1900))
  (slearn 'grob 
         (a (saw 'c2) c (saw 'a2) g (saw 'f5) t (saw 'e4))
	 "catgagcatgagacacacacacagagaaaaaaaagagcatgagacacacacacagaaagagaaagagatagagagcacaca
cacagaggaacatcatcatcatcactacaaaaaagagaaagagatagagagcacacacacagaggaacatcatcatcatcactac"
       :dur 130))

(clear 'golb)

(clear)

;; DOES THAT WORK ?? -- NOW IT DOES !!  
(s 'bass-2 ()
  (lifemodel t 0.4 'triloop 2 :lifespan 3 :autophagia nil :apoptosis nil
	     (nuc 'rates
	  (pitch 100)
		  :gap 400 :reset t))
  (nuc 'rates2 (saw 200 :dur 80 :lp-freq (oscil 300 1400))		  
		  :gap 100 :reset t))

(s 'bass-2 (:sync-to 'grod)
  (nuc 'rates
       (rate 1.2))
  (g 'lul ()
    (n 1 (bd))
    (n 2 (sn 'fat))
    (e 1 2 :d 400 :p 100)
    (e 2 1 :d 400 :p 100)))

;; that's a fat one !!
(s 'bass-2 ()  
  (for bd (prob 20 (dur 500)))
  (for saw (always (dur 100) (atk 3) (rel 90) (lvl 0.6)))
  ;(inh 10 bd)
  ;(inh 20 sn)
  (inh 80 orch)
  (for orch (prob 40 (rev 0.2)))
  (lifemodel t 0.1 'triloop 2 :lifespan 3 :autophagia nil :apoptosis nil
	     (cyc 'rates (~ (% (bd) (pitch 'a1)) (% (sn :lvl 0.2) (pitch 'e2))) 
		  :gap 400 :reset t))
  (cyc 'lul (~ (% (bd :lvl 0.0 :dur 80) (saw 'a1 :lp-freq 500 :dur 100 :lp-dist 1.0)) 90
	       (% (hats) (orch 'marimba :dur 100)) 90
	       (% (sn :dur 80 :lvl 0.1) (saw 'e2 :lp-freq 500 :dur 100 :lp-dist 1.0))) :reset t :gap 180))

(s 'bass-3 ()    
  ;;(for saw (always (cyc 'rates (~  (pitch 'a1)  (pitch 'e2)) :gap 400 :reset t)))
  (cyc 'lula (~ (pitch 'a1) (pitch 'a3) (pitch 'a5)))
  ;;(nuc 'lula  (saw 'a3 :lp-freq 300) :reset t :gap 200)
  ;;(cyc 'lul  (~ (saw 'a2 :lp-freq 300 :dur 100)) :gap 100)
  (cyc 'lulo  (~ (tri 'a2 :lp-freq 3000 :dur 100)) :gap 100)
  )

(pull-transition (gethash 'bass-3 *chain-directory*))

(grow 'lul :method 'triloop :variance 0.1)

(clear)

(s 'bass-2 (:sync-to 'bass-3)
  (always (filter-lp 3000 :lp-dist 1.0) (rev (oscil 0.03 0.0 :cycle 20)))  
  (g 'lula ()
    (n 1 (meow 100 :sus 400))
    (n 2 (meow 200 :sus 400))
    (e 1 2 :d 400 :p 100)
    (e 2 1 :d 400 :p 100)))


(clear)

;; processor switched between chains ... 
(sink 'd1 ()
  (g 'lvl-gen (:combine-mode 'zip)
    (n 1 (lvl 0.2))
    (n 2 (lvl 0.9))
    (n 3 (lvl (oscil 0.1 1.0)))
    (e 1 1 :p 20)
    (e 1 2 :p 80)
    (e 2 1 :p 60)
    (e 2 3 :p 20)
    (e 2 2 :p 20)
    (e 3 3 :p 90)
    (e 3 1 :p 10))
  (g 'dur-gen (:combine-mode 'zip :affect-transition t)
    (n 1 (dur 64))
    (n 2 (dur 96))
    (e 1 1 :p 80 :d (oscil 64 128))
    (e 1 2 :p 20 :d 64)
    (e 2 1 :p 20 :d 128)
    (e 2 2 :p 80 :d (oscil 128 512)))
  (g 'pitch-generator ()
    (n 1 (tri 'a2))
    (n 2 (tri 'c3))
    (n 3 (tri 'gs2))
    (e 1 2 :p 80 :d 1024)
    (e 1 3 :p 20 :d 512)
    (e 2 1 :p 70 :d 1024)
    (e 2 2 :p 30 :d 1024)
    (e 3 1 :p 60 :d 1024)
    (e 3 2 :p 40 :d 512))) 

(clear)

;; same processor, new chain ! 
(dispatch 'd2 ()
  (g 'dur-gen-2 (:combine-mode 'zip :affect-transition t)
    (n 1 (dur 640))
    (n 2 (dur 960))
    (e 1 1 :p 80 :d 640)
    (e 1 2 :p 20 :d 640)
    (e 2 1 :p 80 :d 1280)
    (e 2 2 :p 20 :d 1280))
  (graph 'pitch-generator ()
    (node 1 (tri 'a4))
    (node 2 (tri 'c4))
    (node 3 (tri 'gs4))
    (edge 1 2 :prob 80 :dur 1024)
    (edge 1 3 :prob 20 :dur 512)
    (edge 2 1 :prob 70 :dur 1024)
    (edge 2 2 :prob 30 :dur 1024)
    (edge 3 1 :prob 60 :dur 1024)
    (edge 3 2 :prob 40 :dur 512))) 

(s 'bub ()
  (lifemodel nil 0.4 'triloop 2 :lifespan 3 :autophagia nil :apoptosis nil
	     (nuc 'rates
		  (rate 3.2)
		  :gap 400 :reset t))
  (g 'lul ()
    (n 1 (bd))
    (n 2 (sn))
    (e 1 2 :d 400 :p 100)
    (e 2 1 :d 400 :p 100)))

(s 'bb (:sync-to 'bub)  
  (lifemodel t 0.1 'triloop 15 :lifespan 33 :durs '(100 200 200 100)
	  (nuc 'bell (risset 2000 :atk (oscil 4 100)
			     :lvl 0.1 :sus 300 :rel 400 :rev 0.1)
	       :gap 400 :reset t)))
(clear)

;; NOT A BUG, the events were just incompatible ...
;; exec successively
(s 'bass-2 ()
  (lifemodel t 0.4 'triloop 2 :lifespan 3 :autophagia nil :apoptosis nil
	     (nuc 'rates
		  (pitch 100) 
		  :gap 400 :reset t)) ;; if you switch the event types in the same
  ;; generator, make sure you reset it or use compatible types ... 
  (nuc 'rates2 (saw 100 :dur 80 :lp-freq (oscil 300 1400))		  
       :gap 100 :reset t))


(s 'bass-2 ()
  (nuc 'rates
       (rate 7.2)
       :gap 400 :reset t)
  (g 'lul ()
    (n 1 (bd))
    (n 2 (sn 'fat))
    (e 1 2 :d 400 :p 100)
    (e 2 1 :d 400 :p 100)))


(branch 'bb :variance 0.1 :sync-to 'bass-2 :functors '(((pitch) (* 2))))

(cutall 'bb)

;; tell a story ! 
;; (abandoned syntax idea ... )
(begin with ...
       after a while ... started playing intense/slowly/... <- probs 
       after a short while ...
       short break)

(clear)

(s 'mo-bass ()
  (graph 'bassline ()
    (node 1 (tri 'c2 :lvl 0.7 :atk 2 :rel 30 :dur 720 :lp-freq 500))
    (node 2 (tri 'g2 :lvl 0.7 :atk 2 :rel 30 :dur 720 :lp-freq 500))
    (node 3 (tri 'c2 :lvl 0.7 :atk 2 :rel 30 :dur 720 :lp-freq 500))
    (node 4 (tri 'g2 :lvl 0.7 :atk 2 :rel 30 :dur 720 :lp-freq 500))
    (node 5 (tri 'c2 :lvl 0.7 :atk 2 :rel 30 :dur 720 :lp-freq 500))
    (node 6 (tri 'g2 :lvl 0.7 :atk 2 :rel 30 :dur 720 :lp-freq 500))
    (node 7 (tri 'c2 :lvl 0.7 :atk 2 :rel 30 :dur 720 :lp-freq 500))
    (edge 1 3 :dur 1000 :prob 100)
    (edge 3 1 :dur 1000 :prob 100)
    (edge 2 3 :dur 1000 :prob 100)
    (edge 3 2 :dur 1000 :prob 100)
    (edge 3 4 :dur 1000 :prob 100)
    (edge 4 3 :dur 1000 :prob 100)
    (edge 4 5 :dur 1000 :prob 100)
    (edge 5 4 :dur 1000 :prob 100)
    (edge 5 6 :dur 1000 :prob 100)
    (edge 6 5 :dur 1000 :prob 100)
    (edge 5 7 :dur 1000 :prob 100)
    (edge 7 5 :dur 1000 :prob 100)))


(grow 'bassline :durs '(100 200 200 100 100) :variance 0.2 :method 'quadloop)

(discourage 'bassline)

(prune 'bassline)

(clear)
(stop)

(s 'bd (:sync-to 'bass-2)
  (cc 100 (lvl 0.2))
  (nuc 'bnuc (bd) :gap 400 :reset t))

(s 'hi-2 ()
  (cc (fade 60 30) (lvl 0.0) :f #'utter-p)
  (cc 20 (rate (oscil 0.9 1.4) :combi-fun #'*) :f #'snare-p)
  (cc 80 (start (oscil 0.0 1.0)) :f #'utter-p)
  (s-oscb 'lp-freq 30 10002 :f #'utter-p)
  (g 'bl-2 ()
    (n 1 (bd '|909|))
    (n 2 (sn 'cr78 :rev 0.1) (bd '|909|))
    (n 3 (utter 'myman) (bd '|909|))
    (e 1 2 :p 100)
    (e 1 3 :p 100)
    (e 2 3 :p 100)
    (e 3 1 :p 100)))

;; todo : reset flag ... if set, only replace nodes (leaving grown nodes intact)
(s 'hi ()
  (cc 100 (start (oscil 0.01 0.9)))
  (nuc 'ki (utter 'kinski) :gap (oscil 256 1024) :reset t))

(branch 'hi :variance 0.4 :functors '(((rate) (* 2.3)) ((lvl) (* 1.5))) :shift 256)

(discourage 'ho)

(s 'ho ()
   (cyc 'ho (e- (bd) (sn 'cr)) 512 :reset t :rep 0 :rnd 80 :max-rep 5))

(s 'hhasd (:sync-to 'ho :shift 256)  
  (cyc 'hh (e- (elec 'accent 'hat)) 512))

(clear)
;; DOESN'T WORK !!! 
(s 'tbest ()
  (graph 'b-test ()
    (node 1         
	  (grain "field" "maine_train" :dur 128
		 :lvl (oscil 0.0 1.0) :rate 0.8 :start 0.1 :atk 1 :rel 7
		 :lp-dist 1.0 :lp-freq 5000 :rev 0.01 :pos 0.5))
    (node 2       
	  (grain "field" "maine_train" :dur 128
		 :lvl (oscil 0.0 1.0) :rate 0.8 :start 0.1 :atk 1 :rel 7
		 :lp-dist 1.0 :lp-freq 5000 :rev 0.01 :pos 0.5))
    (node 3 
	  (growth 'self 0.01)
	  (grain "field" "maine_train" :dur 128
		 :lvl (oscil 0.0 1.0) :rate 0.8 :start 0.1 :atk 1 :rel 7
		 :lp-dist 1.0 :lp-freq 5000 :rev 0.01 :pos 0.5))
    (node 4
          (shrink 'self :exclude '(1 2 3 4 ))
	  (grain "field" "maine_train" :dur 128
		 :lvl (oscil 0.0 1.0) :rate 0.8 :start 0.1 :atk 1 :rel 7
		 :lp-dist 1.0 :lp-freq 5000 :rev 0.01 :pos 0.5))
    (edge 1 2 :prob 90 :dur 256)
    (edge 2 2 :prob 90 :dur 256)
    (edge 2 3 :prob 5 :dur 256)
    (edge 2 4 :prob 5 :dur 256)
    (edge 1 3 :prob 5 :dur 256)
    (edge 1 4 :prob 5 :dur 256)
    (edge 3 1 :prob 50 :dur 256)
    (edge 3 2 :prob 50 :dur 256)
    (edge 4 1 :prob 50 :dur 256)
    (edge 4 2 :prob 50 :dur 256)))

(clear)

(g 'some-more-other-sines ()
    (n 1 (sine 100 :lvl .6 :dur 200))
    (n 2 (sine 200 :lvl .6 :dur 200))
    (n 3 (sine 300 :lvl .6 :dur 200))
    (e 1 2 :p 50 :d 300)
    (e 1 1 :p 50 :d 300) 
    (e '(1 1 1) 3 :p 100 :d 900)     
    (e 2 1 :p 10 :d 300)
    (e 2 3 :p 10 :d 200)
    (e 2 2 :p 80 :d 300)
    (e '(2 2 2 2 2) 3 :p 50 :d 600)
    (e '(2 2 2 2 2) 1 :p 50 :d 600)   
    (e 3 1 :p 100 :d 300))

;; manual clone ...
(clone 'some-more-other-sines 'ccalone)

(pring 'ccalone t)

(g 'some-other-sines ()
    (n 1 (sine 50 :lvl .6 :dur 200))
    (n 2 (sine 100 :lvl .6 :dur 200))
    (n 3 (sine 150 :lvl .6 :dur 200)
       ;;(ctrl (grow 'some-other-sines :variance 0.2))
       )
    (e 1 2 :p 50 :d 300)
    (e 1 1 :p 50 :d 300) 
    (e '(1 1 1) 3 :p 100 :d 900)     
    (e 2 1 :p 10 :d 300)
    (e 2 3 :p 10 :d 200)
    (e 2 2 :p 80 :d 300)
    (e '(2 2 2 2 2) 3 :p 50 :d 600)
    (e '(2 2 2 2 2) 1 :p 50 :d 600)   
    (e 3 1 :p 100 :d 300))

(sink 's2 ()  
  'some-other-sines)

(grow 'some-other-sines :functors '(((pitch) (* 8))))

(branch 's2 :variance 0.0 :functors '(((pitch) (* 8))))

(sink 's3 ()
  'some-clone)

;; not sure if this actually creates a copy of a graph ??
;; might work when branching from sink, because it clones the
;; individual processors ... 
(clone 'some-other-sines 'some-other-precise-clone)

(pring 'some-other-clone t)
(pring 'some-other-sines t)

(branch 's2 :variance 0.2)

(cut 's2)

(clear)

;; DOESN'T WORK !! 
(sink 'rere (:sync-to nil :branch nil :shift 0)
  (g 'crepes ()
    (n 1 (grain-24db-ambi "elec" "bd808"
		     :dur 90
		     :rate 1.0
		     :lp-q 0.4
		     :lp-freq 900
		     :lvl 0.7))
    (n 2 (ctrl #'(lambda () (grow 'crepes
			     :variance 0.3
			     :durs '(2000 500 500 500 250 333))))
       (nores "elec" "snfat"
		     :dur 90
		     :rate 1.1
		     :lp-q 0.4
		     :lp-freq (oscil 900 3000 :cycle 4)
		     :lvl 0.7))
    (e 1 1 :d 1000 :p 90)
    (e 1 2 :d 1000 :p 10)
    (e 2 2 :d 1000 :p 5)
    (e 2 1 :d 1000 :p 95)
    ))

;; DOESN'T WORK !! 
(sink 'dede (:sync-to 'rere :branch nil :shift 500)
  (g 'crepessu ()
    (n 1 (grain-24db "elec" "sncr78" :dur 90 :rate 1.0
		:lp-freq 9500
		:lp-dist 0.5 :lvl 0.7	        
		:azi 1.0
		:ele 1.81
		))
    (n 2 (ctrl #'(lambda () (grow 'crepessu
			     :variance 0.2
			     :durs '(2000 2000 500 500 500 250 333))))
       (grain-24db "elec" "sncr78" :dur 90 :rate 1.0
		:lp-freq 9500
		:lp-dist 0.5 :lvl 0.7
		:azi 1.0
		:ele 1.81
		))
    (e 1 1 :d 1000 :p 90)
    (e 1 2 :d 1000 :p 10)
    (e 2 2 :d 1000 :p 5)
    (e 2 1 :d 1000 :p 95)
    ))


(group 'blba)

(stop 'DEFAULT)

(sink 'blub (:shift 0 :group 'a)
  'some-other-sines)

(sync-progn 'blub
  (sink 's2 (:sync-to nil :branch nil :shift 0 :group 'a )))

;; DOESN'T WORK
(sink 'drums-sink ()  
  (graph 'drums ()
    (node 1 (grain-24db "tutorial_samples" "jazzy_bd" :rev 0.0
		   :lvl 0.9 :rate 0.9 :lp-q 0.2 :dur 100))
    (node 2 (grain-24db "tutorial_samples" "jazzy_sn" :lvl 0.9 :lp-dist 0.9
		   :dur 800 :rate 0.5 :lp-q 0.2 :lp-freq-lfo-speed 1.0
		   :lp-freq-lfo-depth 1.0 :lp-freq-lfo-phase 0.5 :lp-freq 9000
		   :rev 0.0))
    (edge 1 2 :dur 900 :prob 100)
    (edge 2 1 :dur 900 :prob 100)))

(cutall 's2)

(stop 'drums-sink-clone)
(stop 'drums-sink)

(clone 'drums 'drums-dl)
(clone 'drums 'drums-dl-2 :track nil)

(sink 'drums-sink-clone (:shift 0)
  (cc 0 (lvl 0.0))
  'drums-dl)

(sink 'drums-sink-clone-2 (:shift 0)
  (cc 0 (lvl 0.0))
  'drums-dl-2)

;; the solution is rather prosaic:
(sink 'bassline-sink (:sync-to 'drums-sink))

;; SAMPLE OUTDATED !!
(sink 'guitar-sink (:sync-to 'drums-sink :shift 100) ;;<- sync, but wait for 200ms!
  (graph 'guitar ()
    (node 1 (grain "02_instruments" "09_egit_lick_high_140bpm"
		   :lvl 0.5
		   :lp-dist 0.9
		   :dur 160
		   :start 0.21 ;; <- start position, relative to the file length
		   :rate 1.0)) ;; <- playback rate ..
    (edge 1 1 :dur 1000 :prob 100)))

(clear)
(stop)

(g 'some-sines ()
    (n 1 (tri 'd1 :lvl .6 :lp-freq 1000 :lp-dist 1.0 :dur 200))
    (n 2 (sqr 'a1 :lp-freq 200 :lvl .6 :lp-dist 1.0 :dur 200))
    (n 3 (saw 'f1 :lp-freq 200 :lvl .6 :lp-dist 1.0 :dur 200))
    (e 1 2 :p 50 :d 300)
    (e 1 1 :p 50 :d 300) 
    (e '(1 1 1) 3 :p 100 :d 900)     
    (e 2 1 :p 10 :d 300)
    (e 2 3 :p 10 :d 200)
    (e 2 2 :p 80 :d 300)
    (e '(2 2 2 2 2) 3 :p 50 :d 600)
    (e '(2 2 2 2 2) 1 :p 50 :d 600)   
    (e 3 1 :p 100 :d 300))

(sink 's1 (:sync-to 's2)
  (cc 0 (rev 0.1))
  'some-sines)

(sink 's2 (:branch t)
  (g 'some-other-sines ()
    (n 1 (sine 'ds6 :lvl .6 :dur 200))
    (n 2 (sine 'fs4 :lvl .6 :dur 200))
    (n 3 (sine 'bs5 :lvl .6 :dur 200))
    (e 1 2 :p 50 :d 300)
    (e 1 1 :p 50 :d 300) 
    (e '(1 1 1) 3 :p 100 :d 900)     
    (e 2 1 :p 10 :d 300)
    (e 2 3 :p 10 :d 200)
    (e 2 2 :p 80 :d 300)
    (e '(2 2 2 2 2) 3 :p 50 :d 600)
    (e '(2 2 2 2 2) 1 :p 50 :d 600)   
    (e 3 1 :p 100 :d 300)))

(sink 's2 (:branch t)
  (g 'other-sines ()
    (n 1 (sine 'd6 :lvl .6 :dur 200))
    (n 2 (sine 'f4 :lvl .6 :dur 200))
    (n 3 (sine 'b5 :lvl .6 :dur 200))
    (e 1 2 :p 50 :d 300)
    (e 1 1 :p 50 :d 300) 
    (e '(1 1 1) 3 :p 100 :d 900)     
    (e 2 1 :p 10 :d 300)
    (e 2 3 :p 10 :d 200)
    (e 2 2 :p 80 :d 300)
    (e '(2 2 2 2 2) 3 :p 50 :d 600)
    (e '(2 2 2 2 2) 1 :p 50 :d 600)   
    (e 3 1 :p 100 :d 300)))

(clear)

;; you can use midi events, currently only with JACK
;; (i guess ?)
(sink 's1 ()
  (g 'uno-midi ()
    (n 1 (mid #'(lambda () (+ 20 (random 60))) :lvl .8 :dur 200))
    (n 2 (mid 81 :lvl 1 :dur 200) (mid 50 :lvl 1 :dur 50))
    (e 1 2 :p 100 :d #'(lambda () (+ 10 (random 900))))
    (e 2 1 :p 100 :d 400)))

(sink 's2 () 
  (g 'dos-midi ()
    (n 1 (mid 44 :lvl (fade 0.0 1.0 :steps 10) :dur 200))    
    (e 1 1 :p 100 :d 256)))

(sink 's2 () 
  (g 'dos-midi ()
    (n 1 (mid 44 :lvl
	      (env '(0.0 1.0 1.0 0.0 0.0 0.5 0.5 0.0)
		   '(10 10 10 10 10 10 10)) :dur 200))    
    (e 1 1 :p 100 :d 256)))

(sink 's1 ()
  (g 'dos-midi-0 ()
    (n 1 (mid 66))
    (n 2 (mid 66))
    (n 3 (mid 66))   
    (e 1 1 :p 20 :d 256)
    (e 1 2 :p 80 :d 256)
    (e 2 3 :p 100 :d 256)
    (e 3 2 :p 50 :d 256)
    (e 3 1 :p 50 :d 256)
    (e '(3 2 3) 1 :p 90 :d 256)
    (e '(3 2 3) 2 :p 10 :d 256))
  (g 'dos-midi ()
    (n 1 (mid 44))
    (n 2 (mid 44))
    (n 3 (mid 44))   
    (e 1 1 :p 20 :d 256)
    (e 1 2 :p 80 :d 256)
    (e 2 3 :p 100 :d 256)
    (e 3 2 :p 50 :d 256)
    (e 3 1 :p 50 :d 256)
    (e '(3 2 3) 1 :p 90 :d 256)
    (e '(3 2 3) 2 :p 10 :d 256)))


;; dispatch the graph to make it sound 
;; the empty parentheses are the space for additional options
;; (which we don't use so far ... )

(sink 'd1 ()
	  (graph 'duration-generator (:combine-mode 'zip :affect-transition t)
		 (node 1 (dur 64))
		 (node 2 (dur 96))
		 (edge 1 1 :prob 80 :dur 64)
		 (edge 1 2 :prob 20 :dur 64)
		 (edge 2 1 :prob 80 :dur 128)
		 (edge 2 2 :prob 20 :dur 128))
	  (graph 'pitch-generator ()
		 (node 1 (mid 'a2))
		 (node 2 (mid 'c3))
		 (node 3 (mid 'gs2))
		 (edge 1 2 :prob 80 :dur 1024)
		 (edge 1 3 :prob 20 :dur 512)
		 (edge 2 1 :prob 70 :dur 1024)
		 (edge 2 2 :prob 30 :dur 1024)
		 (edge 3 1 :prob 60 :dur 1024)
		 (edge 3 2 :prob 40 :dur 512))) 

(clone 'dur-gen 'dur-gen-2)

(pring 'dur-gen-2)

(stop 'd1)

;; individual graphs are basically first-order markov chains ...
(graph 'dos-midi ()
       (node 1 (mid 59 :lvl .8 :dur 1500))
       (node 2 (mid 73 :lvl .9 :dur 1500))
       (node 3 (mid 78 :lvl .9 :dur 350))
       (edge 1 2 :prob 50 :dur 5500)
       (edge 1 3 :prob 50 :dur 6750)
       (edge 2 1 :prob 100 :dur 5500)
       (edge 3 1 :prob 100 :dur 6250))

(graph 'uno-midi-synced ()
       (node 1 (mid 65 :lvl .8 :dur 200))
       (node 2 (mid 81 :lvl 1 :dur 200) (mid 50 :lvl 1 :dur 50))
       (edge 1 2 :prob 100 :dur 400)
       (edge 2 1 :prob 100 :dur 400))

(dispatch 'd1 ()
  'dos-midi)


(clear)
;; sync dispatching, will be performed when the graph specified
;; as sync-to is dispatched
(dispatch 'd2 (:sync-to 'd1) 'uno-midi-synced)

(deactivate 'dos-midi)
(deactivate 'uno-midi-synced)

;; you can also dispatch multiple graphs at the same time, the event
;; streams will be cutalled (for now) ...
;; in the future, the event streams might also be combined according to
;; certain rules (which i have to figure out yet)
;; in any case, the last graph in the chain determines the timing
(sink 's1 ()
  'uno-midi
  'dos-midi)

;; deactivate the object in the chain closest to the dispatcher to make it stop ...  
(deactivate 'uno-midi)
(clear)
;; use the grain event to play a (or parts of) a soundfile

(graph 'the-grain () 
  (node 1 (grain "misc" "tada" :dur 3000 :lp-freq 6000 :pos 0.5 :lvl 1.0 :rate 0.5 :atk 64 :rel 65 :rev 0.0))
       (edge 1 1 :prob 100 :dur 2000 ))

(dispatch 'd1 (:sync-to 'the-512-beat)
  ;;(chance-combine 'grain-lvl-cc 0 (lvl 0.0))
  'the-grain)

(deactivate 'the-grain)

(clear)

(graph 'the-512-beat ()
       (node 1 (grain "03_electronics" "01_808_long_kick" :dur 512
		      :lvl 1.0 :rate 1.1 :start 0.01 :atk 1 :rel 7
		      :lp-dist 1.0 :lp-freq 5000 :rev 0.0  :pos 0.5))
       (node 2 (grain "03_electronics" "08_fat_snare" :dur 512 :atk 0.1 :pos 0.5
		      :lvl 0.9 :rate 2.4 :rev 0.0 :tags '(snare) ))
       (node 3 (grain "03_electronics" "01_808_long_kick" :dur 512
		      :lvl 1.0 :rate 1.1 :start 0.01 :atk 1 :rel 7
		      :lp-dist 1.0 :lp-freq 5000 :rev 0.0  :pos 0.5))     
       (edge 1 2 :prob 100 :dur 512)
       (edge 2 1 :prob 60 :dur 512)
       (edge 2 3 :prob 40 :dur 256)
       (edge 3 3 :prob 40 :dur 256)
       (edge 3 2 :prob 60 :dur 512))

;; events can be printed ...
(print-event (grain "03_electronics" "01_808_long_kick" :dur 512
		      :lvl 1.0 :rate 1.1 :start 0.01 :rel 7
		      :lp-dist 1.0 :lp-freq 5000 :rev 0.0
		      :pos 0.5 :tags '(fru)))

(print-event (pitch 23))

(clear)

(defun is-snare-p (event)
  (member 'snare (event-tags event)))

(sink 's1 () 'the-grain)

(sink 's1 ()  
  (chance-combine 'grain-lvl-cc 0 (lvl 0.0):filter #'is-snare-p)
  ;; long form is broken !!
  (stream-oscillate-between 'tres-osc 'rate 1.0 2.5 :cycle 10 :filter #'is-snare-p)
  'the-512-beat)

(deactivate 'the-grain)

(deactivate 'tap-512)

;; MODIFIERS -- hook modifiers into the chain to manipulate the sound.
(clear)

(graph 'tres-midi ()
       (node 1 (mid 84 :lvl .9 :dur 50))
       (edge 1 1 :prob 100 :dur 100))

(sink 's1 ()
  (brownian-motion 'tres-rw 'pitch :step-size 3 :ubound 84 :lbound 50 :wrap t)  
  (oscillate-between 'tres-osc 'lvl 0.1 0.9 :cycle 100)
  'tres-midi)

;; try uncommenting the elements ...
;; if you set the :flow parameter to nil, dispatching will also stop, but the
;; dispatcher will keep trying to pull (in contrast to deactivating)
(sink 's1 ()  
  (brownian-motion 'tres-rw 'pitch :step-size 3 :ubound 84 :lbound 50 :wrap t)  
  (oscillate-between 'tres-osc 'lvl 0.0 1.0 :cycle 300)
  'tres-midi)

;; hook an event modifier into the chain ...
(sink 's1 ()
 'tres-midi
 (brownian-motion 'tres-rw 'pitch :step-size 5 :ubound 84 :lbound 50 :wrap t)
 'uno-midi)

;; CONDUCTOR GRAPHS -- use a graph to control another graph
(clear)

(graph 'tres-midi ()
       (node 1 (mid 84 :lvl .9 :dur 50))
       (edge 1 1 :prob 100 :dur 100))

;; Use the PSET function to set a parameter in some object.
;; the lambda construction seems a little inconvenient, might
;; be replaced by some macro in the future ... 
(graph 'tres-ctrl ()
  (node 1 (ctrl #'(lambda () (pset 'tres-rw 'step-size (random 10)))))
  (edge 1 1 :prob 100 :dur 5000))

(sink 's1 ()  
  (brownian-motion 'tres-rw 'pitch :step-size 3 :ubound 84 :lbound 50 :wrap t)  
  'tres-midi)

(sink 's1 ()
  'tres-ctrl)

(deactivate 'tres-ctrl)
(deactivate 'tap-b)

;; TAGS AND FILTERS 
(graph 'tres-midi ()
       (node 1 (mid 84 :lvl .9 :dur 50 :tags '(red)))
       (edge 1 1 :prob 100 :dur 200))

(defun has-red-tag-p (event)
  (member 'red (event-tags event)))

(defun has-blue-tag-p (event)
  (member 'blue (event-tags event)))

(sink 's1 ()  
  (brownian-motion 'tres-rw 'pitch :step-size 3 :ubound 84
		   :lbound 50 :wrap t :filter #'has-red-tag-p)  
  'tres-midi)

;; CONDUCTOR GRAPHS -  create graph-based scores by dispatching chains with a conductor graph
(clear)

(chain 'c1 ()     
   (graph 'x-midi ()
       (node 1 (mid 84 :lvl .9 :dur 50))
       (edge 1 1 :prob 100 :dur 200)))


(chain 'c2 ()        
   (graph 'y-midi ()
       (node 1 (mid 85 :lvl .9 :dur 50))
       (edge 1 1 :prob 100 :dur 400)))

;; in this case, don't delete the spigot, as the graph doesn't recreate the chain ...
(graph 'xy-ctrl ()
  (node 1 (ctrl #'(lambda () (sink 'c1 ()))))
  (node 2 (ctrl #'(lambda () (sink 'c2 ()))))
  (node 3 (ctrl #'(lambda () (deactivate 'c1 :del nil))))
  (node 4 (ctrl #'(lambda () (deactivate 'c2 :del nil))))
  (edge 1 2 :prob 100 :dur 4000)
  (edge 2 3 :prob 100 :dur 4000)
  (edge 3 4 :prob 100 :dur 4000)
  (edge 4 1 :prob 100 :dur 4000))

(sink 's1 ())

(deactivate 's1)

;; incrementally build events ...
;; might be understood as a generalization of the
;; serialist paradigm
(clear)

(all-p (car (edge-content (edge 1 2 :prob 40))))

;; this is a nice one ...
(sink 's1 ()  
  ;;(oscillate-between 'dur-osc 'dur 150 400 :cycle 200 :affect-transition t)
  (graph 'pitcher (:combine-mode 'zip)
    (node 1 (pitch 32))
    (node 2 (pitch 52))
    (edge 1 1 :prob 60)
    (edge 1 2 :prob 40)
    (edge 2 2 :prob 55)
    (edge 2 1 :prob 45))
  (graph 'leveller (:combine-mode 'zip)
    (node 1 (lvl 0.6))
    (node 2 (lvl 1.0))
    (node 3 (lvl 0.3))
    (edge 1 1 :prob 40)
    (edge 1 2 :prob 30)
    (edge 1 3 :prob 30)
    (edge 2 2 :prob 55)
    (edge 2 1 :prob 45)
    (edge 3 1 :prob 100))
  (graph 'durator (:combine-mode 'zip :affect-transition nil)
    (node 1 (dur 256))
    (node 2 (dur 128))
    (edge 1 1 :prob 40 :dur 256)
    (edge 1 2 :prob 60 :dur 512)
    (edge 2 2 :prob 45 :dur 1024)
    (edge 2 1 :prob 55))
  (graph 'origin () ;; for now, origin event needs to have handler ...
    (node 1 (mid 84 :lvl .9 :dur 50))
    (edge 1 1 :prob 100 :dur 500)))

(encourage-with-tail 'tap-inc)
(graph->code 'pitcher "/home/nik/REPOSITORIES/FREE_RANGE/MEGRA/pitcher-out.lisp")
(graph->code 'durator "/home/nik/REPOSITORIES/FREE_RANGE/MEGRA/leveller-out.lisp")
(graph->code 'leveller "/home/nik/REPOSITORIES/FREE_RANGE/MEGRA/durator-out.lisp")
(graph->code 'origin "/home/nik/REPOSITORIES/FREE_RANGE/MEGRA/origin-out.lisp")

(deactivate 'tap-inc)

(defun has-two-p (event)
  (member 'two (event-tags event)))

(clear)

;; this is a nice one ...
(sink 's1 ()  
  (graph 'pitcher (:combine-mode 'zip)
    (node 1 (pitch 'a4))
    (node 2 (pitch 'as6))
    (edge 1 1 :prob 60)
    (edge 1 2 :prob 40)
    (edge 2 2 :prob 55)
    (edge 2 1 :prob 45))
   (graph 'origin () ;; for now, origin event needs to have handler ...
    (node 1 (sine 'a3 :lvl .9 :dur 50))
    (node 2 (sine 'a4 :lvl .9 :dur 50))
    (edge 1 2 :prob 100 :dur 100)
    (edge 2 1 :prob 100 :dur 100)))

;; another variant, with different value combi functions ...
(sink 's1 ()
  (graph 'pitcher (:combine-mode 'zip)
    (node 1 (pitch 10 :combi-fun #'-))
    (node 2 (pitch 30 :combi-fun #'-))
    (edge 1 1 :prob 60)
    (edge 1 2 :prob 40)
    (edge 2 2 :prob 55)
    (edge 2 1 :prob 45))
  (graph 'origin () ;; for now, origin event needs to have handler ...
    (node 1 (mid 84 :lvl 1.0 :dur 50))
    (edge 1 1 :prob 100 :dur 1000)))

(sink 's1 ()
  (graph 'origin () ;; for now, origin event needs to have handler ...
    (node 1 (sine 50 :lvl 1.0 :lp-dist 1.0 :lp-freq 150 :lp-q 0.8 :rev 0.0 :atk 4 :rel 400 :dur 500))
    (edge 1 1 :prob 100 :dur 1000)))

(sink 's1 ()
  (graph 'origin-2 () ;; for now, origin event needs to have handler ...
    (node 1 (buzz 30 :lvl 1.0 :lp-dist 0.9 :lp-freq 200 :lp-q 0.5 :rev 0.0 :atk 3 :rel 490 :dur 500))
    (edge 1 1 :prob 100 :dur 2300)))

(clear)

;; controller input, designed for AKAI LPD8 
(register-knob 1 #'(lambda (val) (princ val)))

(register-pad 2 #'(lambda (val) (princ val)))

;; the disencourage algorithm 
(graph 'all-to-all ()
       (node 1 (mid 60 :lvl .8 :dur 250))
       (node 2 (mid 62 :lvl .9 :dur 250))
       (node 3 (mid 64 :lvl .9 :dur 250))
       (node 4 (mid 67 :lvl .9 :dur 150))
       (node 5 (mid 70 :lvl .9 :dur 150))       
       (edge 1 1 :prob 20 :dur 250) (edge 1 2 :prob 20 :dur 125) (edge 1 3 :prob 20 :dur 125)
       (edge 1 4 :prob 20 :dur 250) (edge 1 5 :prob 20 :dur 750)        
       (edge 2 1 :prob 20 :dur 500) (edge 2 2 :prob 20 :dur 250) (edge 2 3 :prob 20 :dur 250)
       (edge 2 4 :prob 20 :dur 250) (edge 2 5 :prob 20 :dur 500) 

       (edge 3 1 :prob 20 :dur 500) (edge 3 2 :prob 20 :dur 500) (edge 3 3 :prob 20 :dur 250)
       (edge 3 4 :prob 20 :dur 500) (edge 3 5 :prob 20 :dur 250) 

       (edge 4 1 :prob 20 :dur 500) (edge 4 2 :prob 20 :dur 500) (edge 4 3 :prob 20 :dur 500)
       (edge 4 4 :prob 20 :dur 500) (edge 4 5 :prob 20 :dur 250) 
       
       (edge 5 1 :prob 20 :dur 500) (edge 5 2 :prob 20 :dur 250) (edge 5 3 :prob 20 :dur 500)
       (edge 5 4 :prob 20 :dur 250) (edge 5 5 :prob 20 :dur 250))

(sink 's1 ()
  'all-to-all)


;; chiptune ftw ---
(sink 's1 ()
  (graph 'gb2-cc-sh ()
    (node 1 (gb2-shape 30))
    (edge 1 1 :dur 1000 :prob 100))
  (graph 'gb2-cc-os ()
    (node 1 (gb2-offset 30))
    (edge 1 1 :dur 1000 :prob 100))  
  (graph 'gb2-cc-sweep ()
    (node 1 (gb2-sweep 100))
    (edge 1 1 :dur 1000 :prob 100))

  (graph 'all-to-all-gb ()
       (node 1 (gb2 'c4 :lvl .8 :dur 240))
       (node 2 (gb2 'cs4 :lvl .9 :dur 240))
       (node 3 (gb2 'd4 :lvl .9 :dur 240))
       (node 4 (gb2 'ds4 :lvl .9 :dur 140))
       (node 5 (gb2 'e4 :lvl .9 :dur 140))       
       (edge 1 1 :prob 20 :dur 550) (edge 1 2 :prob 20 :dur 300) (edge 1 3 :prob 20 :dur 300)
       (edge 1 4 :prob 20 :dur 550) (edge 1 5 :prob 20 :dur 750)        
       (edge 2 1 :prob 20 :dur 500) (edge 2 2 :prob 20 :dur 250) (edge 2 3 :prob 20 :dur 250)
       (edge 2 4 :prob 20 :dur 280) (edge 2 5 :prob 20 :dur 500) 

       (edge 3 1 :prob 20 :dur 500) (edge 3 2 :prob 20 :dur 500) (edge 3 3 :prob 20 :dur 250)
       (edge 3 4 :prob 20 :dur 500) (edge 3 5 :prob 20 :dur 250) 

       (edge 4 1 :prob 20 :dur 500) (edge 4 2 :prob 20 :dur 500) (edge 4 3 :prob 20 :dur 500)
       (edge 4 4 :prob 20 :dur 500) (edge 4 5 :prob 20 :dur 250) 
       
       (edge 5 1 :prob 20 :dur 500) (edge 5 2 :prob 20 :dur 250) (edge 5 3 :prob 20 :dur 500)
       (edge 5 4 :prob 20 :dur 250) (edge 5 5 :prob 20 :dur 250))

  )

(clear)

(deactivate 'gb2-cc)

(progn 
  (discourage 'all-to-all)
  (graph->code 'all-to-all "/home/nik/REPOSITORIES/FREE_RANGE/MEGRA/ata-out.lisp")
  (graph->svg 'all-to-all "/home/nik/REPOSITORIES/FREE_RANGE/MEGRA/ata-vis.dot"))

(graph 'check-midi-note-off ()
  (node 1 (mid 60 :lvl .8 :dur 1000))
  (edge 1 1 :prob 20 :dur 20))

(sink 's1 () 'check-midi-note-off)

(clear)

;; it's possible to define modifications directly on the parameters 
(sink 's1 ()
  (graph 'origin () 
    (node 1 (mid (brownian :start 60 :lower 40 :upper 70)
		 :lvl (oscil 0.0 1.0 :cycle 100)
		 :dur (oscil 100 1000 :cycle 100)))
    (edge 1 1 :prob 100 :dur (oscil 110 1100 :cycle 100))))

(graph 'vom ()
  (n 1 (mid 31))
  (n 2 (mid 31))
  (n 3 (mid 31))
  (e 1 1 :p 100))


(clear) 

(graph 'gengen ()
       (node 1 (gendy 100 900))
       (edge 1 1 :prob 100 :dur 300))

(sink 's1 () 'gengen)

;; generate 
(notes->midi-graph 'blab :notes '((ds3 500) (f3 500) (a3 500) (c3 500)
				  (ds3 500) (f3 500) (a3 500) (c3 500)
				  (ds3 500) (f3 500) (a3 500) (c3 500)
				  (ds3 500) (f3 500) (a3 500) (c3 500)

				  (ds3 500) (f3 500) (a3 500) (c3 500)
				  (ds3 500) (f3 500) (a3 500) (c3 500)
				  (ds3 500) (f3 500) (a3 500) (c3 500)
				  (ds4 500) (f3 500) (a3 500) (c3 500)

				  (ds3 500) (f3 500) (a3 500) (c3 500)
				  (ds3 500) (f3 500) (a3 500) (c3 500)
				  (ds3 500) (f3 500) (a3 500) (c3 500)
				  (ds3 500) (f3 500) (a3 500) (c3 500)

				  (ds3 500) (f3 500) (a3 500) (c3 500)
				  (ds3 500) (f3 500) (a3 500) (c3 500)
				  (ds3 500) (f3 500) (a3 500) (c3 500)
				  (ds3 500) (f3 500) (a3 500) (c3 500)

				  (ds3 500) (f3 500) (a3 500) (c3 500)
				  (ds3 500) (f3 500) (a3 500) (c3 500)
				  (ds3 500) (f3 500) (a3 500) (c3 500)
				  (ds3 500) (f3 500) (a3 500) (c3 500)

				  (ds3 500) (f3 500) (a3 500) (c3 500)
				  (ds3 500) (f3 500) (a3 500) (c3 500)
				  (ds3 500) (f3 500) (a3 500) (c3 500)
				  (ds3 500) (f3 500) (a3 500) (c3 500)

				  (ds3 500) (f3 500) (a3 500) (c3 500)
				  (ds3 500) (f3 500) (a3 500) (c3 500)) :randomize 100)

;; BROKEN !! 
(values->transitions->graph 'durator dur '(500 1000 200) '(512 1024 256))

(values->graph 'pitcher pitch '(a3 a4 d2))

(graph->code 'blab "/home/nik/brup.lisp")

(sink 's1 () 'blab)

(clear)

(setf *discourage-percentage* 40)

(discourage 'blab)

; 1. Test:

(setf *test* (graph->dot (source-graph (gethash 'blab *processor-directory*))))

; 2. Test:

(setf *test* (copy-instance (source-graph (gethash 'blab *processor-directory*))))

(format nil "~a" (graph->dot *test*))

; 3. Test:

(setf *test* (source-graph (gethash 'blab *processor-directory*)))

(graph->svg 'blab "/home/nik/brup.dot" :renderer 'twopi)

(single-values->graph 'pitcher pitch '(a3 a4 d2))

(print-graph (gethash 'pitcher *processor-directory*))

(graph 'be-there-square (:rand 100) ;; <--- thes would make it a fully connected graph
  (n 1 (saw (brownian :lower 50 :upper 90 :step-size 5)
	    :lvl .4 :atk 3 :dec 46 :sus 50 :rel 10
	    :lp-freq 300 :rev 0.0 :lp-q 0.4 :lp-dist 0.8))
  (edge 1 1 :prob 100 :dur 128))

(sink 's2 () 'be-there-square)

(stop 's2)
(clear)

(graph 'footwork-bd ()
       (node 1 (grain "03_electronics" "01_808_long_kick" :dur 512
		      :lvl 1.0 :rate 1.1 :start 0.01 :atk 1 :rel 7
		      :lp-dist 1.0 :lp-freq 5000 :rev 0.0  :pos 0.5))
       (node 2 (grain "03_electronics" "01_808_long_kick" :dur 512 :atk 0.1 :pos 0.5
		      :lvl 0.9 :rate 1.0 :rev 0.0 :tags '(snare) ))
       (node 3 (grain "03_electronics" "01_808_long_kick" :dur 130
		      :lvl 1.0 :rate 1.0 :start 0.01 :atk 1 :rel 7
		      :lp-dist 1.0 :lp-freq 5000 :rev 0.00 :pos 0.5))     
       (edge 1 2 :prob 100 :dur 390)
       (edge 2 1 :prob 20 :dur 130)
       (edge 2 3 :prob 60 :dur 130)
       (edge 3 3 :prob 20 :dur 390)
       (edge 3 2 :prob 80 :dur 260))

(graph 'footwork-sn ()
       (node 1 (grain "03_electronics" "08_fat_snare" :dur 65
		      :lvl 1.0 :rate 2.05 :start 0.01 :atk 1 :rel 7
		      :lp-dist 1.0 :lp-freq 5000 :rev 0.01  :pos 0.5))
       (node 2 (grain "03_electronics" "08_fat_snare" :dur 65 :atk 0.1 :pos 0.5
		      :lvl 0.9 :rate 2.0 :rev 0.01 ))
       (node 3 (grain "03_electronics" "08_fat_snare" :dur 65
		      :lvl 1.0 :rate 2.0 :start 0.01 :atk 1 :rel 7
		      :lp-dist 1.0 :lp-freq 5000 :rev 0.1 :pos 0.5))     
       (edge 1 2 :prob 100 :dur 1560)
       (edge 2 1 :prob 80 :dur 780)
       (edge 2 3 :prob 20 :dur 390)
       (edge 3 3 :prob 70 :dur 780)
       (edge 3 2 :prob 30 :dur 130))


(sink 's1 ()  
  'footwork-bd)

(sink 's1 (:sync-to 'footwork-tap)  
  'footwork-sn)

(clear)

(sink 's1 ()  
  (brownian-motion 'start-b 'start :step-size 0.001 :ubound 0.001 :lbound 0.8 :wrap t)
  (oscillate-between 'lp-freq-c 'lp-freq 100 8000 :cycle 1000)
  (oscillate-between 'q-c 'lp-q 0.1 1.0 :cycle 50)
  (oscillate-between 'pos-c 'pos 0.4 0.8 :cycle 50) 
  (oscillate-between 'rate-b 'rate 0.1 0.14 :cycle 400) 
  'the-grain)


;; hmm does this work ?
(incudine::make-osc-responder *oscin* "/blub/test" "iii"
                    (lambda (a b c)
		      (incudine::msg warn "~D ~D ~D"
		      		     a b c)
		      ))

(sink 's1 ()  
  (graph 'pitcher (:combine-mode 'zip)
    (node 1 (pitch 42))
    (node 2 (pitch 62))    
    (edge 1 1 :prob 60)
    (edge 1 2 :prob 40)
    (edge 2 2 :prob 55)
    (edge 2 1 :prob 45))
   (graph 'origin () ;; for now, origin event needs to have handler ...
    (node 1 (mid 84 :lvl .9 :dur 50))
    (node 2 (mid 84 :lvl .9 :dur 50))
    (edge 1 2 :prob 100 :dur 64)
    (edge 2 1 :prob 100 :dur 128)))

(clear)





