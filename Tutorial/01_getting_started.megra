;; Welcome to the mégra tutorial !
;; Assuming you've everything up and running, we can start to make some sound !

;; first, tell the system that we want to work in the mégra package !
(in-package :megra)

;; Make sure your headphones are not too lound, 
;; move the curser to somewhere in between the outer
;; parenthesis and hit C-<return>:

(sink 'event-sink ()
      (graph 'first-sounds ()
	     (node 1 (sine 'a4 :lvl 0.5 :dur 500))
	     (edge 1 1 :dur 1000 :prob 100)))

;; If nothing went wrong, you should hear a steady beeping now.

(stop) ;; Silence ! 

;; So what happens ? Let's take this apart ... 

;; I recommend you to take pen & paper and visualize every structure.
;; That way, you'll learn more and i don't have to make diagrams. Win-Win.

;; The Graph Structure:
;;
;;  (graph 'first-sounds ()
;;    (node 1 ... )
;;    (edge 1 1 ... ))

;; The whole thing describes a graph structure with one node and
;; one edge, which connects the node to itself. The Node has the ID 1
;; and contains one sound event.

;; The sound event, a sine tone with pitch a4, is denoted as:
;;
;; (sine 'a4 :lvl 0.5 :dur 500)

;; The edge defines the transition time (:dur) between two nodes and the
;; musical events they contain.
;; Also, the edge defines the probability for a possible next node (:prob).

;; (edge 1 1 :dur 1000)

;; As in this trivial example node "1" has only one possible follower, the
;; probability is 100 percent, and the transition time is one second (1000ms)
;; More of this later. 

;; Wait, what about the (sink 'event-sink () ...) ? Well, the graph structure
;; implicitly generates musical events, and those need to be handled. Thus, we
;; need something to catch the events and handle them. Thats what the sink is for,
;; it's an event dispatcher.

;; Anyway, let's play around with this a little:

;; Any node can contain more than one event ! 
(sink 'event-sink ()
      (graph 'first-sounds ()
	     (node 1 (sine 'a4 :lvl 0.5 :dur 500)
		   (sine 'c4 :lvl 0.5 :dur 500))
	     (edge 1 1 :dur 1000 :prob 100)))

;; It'd be boring if you could't put event in sequences, no ?
(sink 'event-sink ()
      (graph 'first-sounds ()
	     (node 1 (sine 'a4 :lvl 0.5 :dur 500))
	     (node 2 (sine 'c4 :lvl 0.5 :dur 500))
	     (edge 1 2 :dur 1000 :prob 100)
	     (edge 2 1 :dur 1000 :prob 100)))

;; this one does exactly the same as the one above,
;; but is a little less exhausting to write. Choose
;; yourself which one you like better ...
;; (if you wonder by now if mégra can only produce sine beeps, of course not ...
;; the sonic possiblities will be explored later ...)
(sink 'event-sink () 
      (g 'first-sounds ()
	 (n 1 (sine 'a4 :lvl 0.5 :dur 500))
	 (n 2 (sine 'c4 :lvl 0.5 :dur 500))
	 (e 1 2 :d 1000 :p 100)
	 (e 2 1 :d 1000 :p 100)))

;; Now the magic of conditional probabilies begin to dawn ...
(sink 'event-sink () 
      (g 'first-sounds ()
	 (n 1 (sine 'a4 :lvl 0.5 :dur 500))
	 (n 2 (sine 'c4 :lvl 0.5 :dur 500))
	 (e 1 1 :d 1000 :p 50)
	 (e 1 2 :d 1000 :p 50)
	 (e 2 1 :d 1000 :p 100)))
;; this one has a 50/50 chance that node 1 will have itself
;; or node 2 as successor.

;; let's complete the chord ! And make it a little faster ... 
;; Remember to visualize ! 
(sink 'event-sink () ; <- these empty parenthesis are important ! 
      (g 'first-sounds () ; <- don't forget them (more later!)
	 (n 1 (sine 'a4 :lvl 0.5 :dur 500))
	 (n 2 (sine 'c4 :lvl 0.5 :dur 500))
	 (n 3 (sine 'e4 :lvl 0.5 :dur 500)) 
	 (e 1 1 :d 500 :p 33)
	 (e 1 2 :d 500 :p 33)
	 (e 1 3 :d 500 :p 34) ;; <- make sure you come out at 100% ! 
	 (e 2 1 :d 500 :p 100)
	 (e 3 1 :d 500 :p 100)))

(stop) ;; Let's take a rest !  

;; If you want to know more about conditional probabilies in music,
;; and how expectation and perception is influenced by them, 
;; i recommend the book "Sweet Anticipation: Music and the Psychology
;; of Expectation" by David Huron.

;; Sidenote - pitches can be denoted as note names (relying on Common Music)
;; or directly as frequencies (tunings can be anything Common Music supports,
;; for now see the documentation there ... ):

;; Note names:
(sink 'spam-sink () ; <- Sinks can be named arbitrarily ... 
      (g 'spam ()  ; <- graphs as well ... 
	 (n 1 (sine 'a4 :lvl 0.5 :dur 500))
	 (n 2 (sine 'cs4 :lvl 0.5 :dur 500)) ; add an 's' for 'sharp'
	 (n 3 (sine 'e4 :lvl 0.5 :dur 500)
	    (sine 'af5 :lvl 0.2 :dur 500 :rev 0.06)) ; add an 'f' for 'flat'
	 (e 1 1 :d 500 :p 33)
	 (e 1 2 :d 500 :p 33)
	 (e 1 3 :d 500 :p 34) ;; <- make sure you come out at 100% ! 
	 (e 2 1 :d 500 :p 100)
	 (e 3 1 :d 500 :p 100)))

;; Frequencies:
(sink 'eggs-sink () 
      (g 'eggs ()
	 (n 1 (sine 200 :lvl 0.5 :dur 300))
	 (n 2 (sine 331 :lvl 0.5 :dur 300))
	 (n 3 (sine 432 :lvl 0.5 :dur 300)) 
	 (e 1 1 :d 300 :p 33)
	 (e 1 2 :d 300 :p 33)
	 (e 1 3 :d 300 :p 34) ;; <- make sure you come out at 100% ! 
	 (e 2 1 :d 300 :p 100)
	 (e 3 1 :d 300 :p 100)))

;; And, if you've executed those two blocks of code, you'll also realize
;; that you can run two (and more) event sinks in parallel. In their current
;; state, they're completely unsynchronized.

;; you can stop/clear them separately as well ! 
(stop 'spam-sink) ;; Break !
(clear 'eggs-sink)
(clear) ;; reset complete session 

;; the difference between (stop) and (clear) is that the first one will keep
;; generators in their current state, while the latter one will wipe them
;; from the current session, so the next time you start them you'll start from
;; scratch.

;; So wait again, in the introduction there was something about
;; "Variable-Order" Markov-Chains, but the ones above are only order one.
;; True, but behold ...

;; You'll notice that this construction as it is is
;; a little boring, as it stays on the A most of the time.
(sink 'eggs-sink () 
      (g 'eggs ()
	 (n 1 (sine 'a3 :lvl 0.5 :dur 300))
	 (n 2 (sine 'c4 :lvl 0.5 :dur 300))
	 (n 3 (sine 'e4 :lvl 0.5 :dur 300))
	 (n 4 (sine 'f4 :lvl 0.5 :dur 300)) 
	 (e 1 1 :d 300 :p 90)
	 (e '(1 1 1 1 1) 4 :d 600 :p 50)
	 (e '(1 1 1 1 1) 3 :d 600 :p 50) ; <- all in all 100% for every source !
	 (e 1 2 :d 300 :p 5)             
	 (e 1 3 :d 300 :p 5) ;; <- make sure you come out at 100% ! 
	 (e 2 1 :d 300 :p 100)
	 (e 3 1 :d 300 :p 100)
	 (e 4 2 :d 300 :p 100)))

;; Now say you want some change when the A has been repeating 5 times.
;; No problem, uncomment the two lines that have a list as edge source ! 

;; so now, any path (currently limited to a length of 9 past nodes) can serve as
;; a source.

;; Make sure that the probablities for each path that serves as source come out
;; at 100% !

;; This chapter was more about structure, in the next chapter we will deal
;; with sounds !

(clear)
