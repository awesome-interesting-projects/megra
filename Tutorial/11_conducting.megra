;; 11 - Conducting graphs with other graphs 
(in-package :megra)

(clear)

;; not only graphs, but whole processor chains
;; can be pre-defined ...
(chain 'x ()
  (cc 20 (pitch 0.7 :combi-fun #'*))
  (cc 20 (pitch 1.2 :combi-fun #'*))
  (graph 'trii ()
    (node 1 (tri 184 :lvl .5 :dur 50))
    (edge 1 1 :prob 100 :dur 200)))

;; ... and activated like this:
(sink 'x ())

;; another one ... 
(chain 'y ()
  (cc 20 (pitch 0.7 :combi-fun #'*))
  (cc 20 (rev 0.1))
  (cc 20 (dur 1.2 :combi-fun #'*))
  (graph 'cubb ()
    (node 1 (cub 285 :lvl .7 :dur 50))
    (edge 1 1 :prob 100 :dur 400)))

;; start in sync to x
(sink 'y (:sync-to 'x))

;; you can now still modify the chain ...

;; break
(clear)

;; for larger compositions, a conductor graph can be created using
;; control events, thus automating parts of your piece or set ! 
(sink 'conductor ()
  (graph 'xy-ctrl ()
    (node 1 (ctrl #'(lambda () (sink 'x ())))) ;; <- ctrl event takes any function as arg
    (node 2 (ctrl #'(lambda () (sink 'y (:sync-to 'x)))))
    (node 3 (ctrl #'(lambda () (stop 'x))))
    (node 4 (ctrl #'(lambda () (stop 'y))))
    (edge 1 2 :prob 100 :dur 4000)
    (edge 2 3 :prob 100 :dur 4000)
    (edge 3 4 :prob 100 :dur 4000)
    (edge 4 1 :prob 100 :dur 4000)))
