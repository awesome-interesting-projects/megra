(in-package :megra) ;; <- yes, that needs to be there ... 

;; let's take a simple, repetetive bass sound:
;; one node, one edge ...

(s 'acid ()
  (g 'bass ()
    (n 1 (saw 90 :dur 110 :atk 3 :rel 100 :lp-freq 330))
    (e 1 1 :d 120 :p 100)))

;; so nice, so boring (after a while)
;; So, how to make things more interesting ? Naive approach would be
;; to manually add some nodes, as we've already seen:

(s 'acid ()
  (g 'bass ()
    (n 1 (saw 90 :dur 110 :atk 3 :rel 100 :lp-freq 330))
    (n 2 (saw 100 :dur 110 :atk 3 :rel 100 :lp-freq 330))
    (n 3 (saw 115 :dur 110 :atk 3 :rel 100 :lp-freq 330))
    (e 1 2 :d 120 :p 50)
    (e 1 3 :d 120 :p 50)
    (e 2 3 :d 120 :p 100)
    (e 3 1 :d 120 :p 100)))

;; not too bad, but also laborious, and there's a high chance that we'll
;; and up with the same structures most of the time.

(clear) ;; break ...

;; So, can event generators be created in a more concise, and surprising, fashion?
;; Worry not! First, let's go a step back ... can we write this ...

(s 'acid ()
  (g 'bass ()
    (n 1 (saw 90 :dur 110 :atk 3 :rel 100 :lp-freq 530))
    (e 1 1 :d 120 :p 100)))

;; ... a little shorter ? Yes, we can ! The one above is the same as this one

(s 'acid ()
  (nuc 'bass (saw 90 :dur 110 :atk 3 :rel 100 :lp-freq 330) :dur 120)) ;;<- the NUCleus ! 

;; now behold (or, better execute the following several times):

(grow 'bass :var 0.8) ;; <- play with the variance a bit, but stay below 1.0

(stop)
(clear)

;; to check what you have just cultivated:
(pring 'bass t) ;; pring is short for 'print graph' 

;; you can also generate an SVG (if you don't provide a folder, it'll be in the
;; same folder as the current file):
(graph->svg 'bass "bass-diagram" :renderer 'neato) ;; <- all graphviz renderers available!

;; there's more than one method to "grow" a graph:

;; default, heuristic method
(grow 'bass :var 0.8)

;; this one will likely (but not strictly) lead to little, occasionally repeating groups of 3
;; events:
(grow 'bass :var 0.8 :method 'triloop)

;; groups of 4 events:
(grow 'bass :var 0.8 :method 'quadloop)

;; plain old loop ... also, mix in some different durations (one will be chosen at random ...)
(grow 'bass :var 0.8 :method 'loop :durs '(120 240 240 480))

;; Try to mix and match them for a bit !

;; Now, once you generator has grown to a respectable size, you might want to
;; prune it for a bit ... it's easy !

(prune 'bass) ;; that's it !

;; The whole process can also be done without any interaction!

;; currently, there's a simple probablity-controlled way to
;; simulate some dynamics
(s 'acid ()
  (lim 'lvl 0.2 0.4) ;; <- put a limit on level to save your ears and speakers some trouble !
  (probctrl t 20 0 :var 0.4 :method 'loop :durs '(240 120 120 480) 
	    (nuc 'bass (saw 110 :dur 110 :atk 3 ;;<- the NUCleus 
			        :rel 100 :lp-freq 630) 
		 :dur 120 :reset nil)))
;; the trouble with this one is that it might wipe itself out easily

;; and a primitive lifemodel ..
(s 'acid ()
  (lim 'lvl 0.2 0.4) ;; <- put a limit on level to save your ears and speakers some trouble !
  (lifemodel t 20 30 :var 0.4 :method 'loop 20 :durs '(240 120 120 480) :apoptosis t :autophagia nil
	     (nuc 'bass (saw 90 :dur 110 :atk 3 :rel 100 :lp-freq 830) ;;<- the NUCleus 
		  :dur 120 :reset t)))  


;; if the reset flag is set, the generator will be reset
;; to the original nucleus, otherwise it remains
;; untouched ...

;; If you've found a state you like, you can freeze it there ! 

;; thus, you can have generators that evolve into new and surprising directions !
