;; MÃ©gra is uses event streams, in which
;; the stream of musical events can be streamed through
;; certain modificators ...

;; Modifying the Event Stream
(in-package :megra)

;; Now take the beat from the last chapter ...
;; PFAs can be defined anywhere !  
(slearn 'beat ;; <- slearn stands for "shorthand learn"
        (x (sn) o (bd) - (hats)) ;; <- First, define an event key
        "x---o---x---o---x---o---x---o---" ;; <- Now, provide a distribution with the defined events
        :dur 300)

;; to read the flow of events, read from bottom up !
(sink 'play-the () ;; <- ... and stream to here ! 
  ;; <------------ (in between, a lot of stuff can happen !)
  'beat) ;; <- events are generated here ...

;; now let's set some parameters
;; for some conceptual background check the "event arithmetics"
;; chapter of this tutorial
(sink 'play-the () 
  (always (lvl 0.2) (rev 0.1)) ;; set the level, add some reverb ...
  'beat) 

;; you can apply modificators selectively 
(s 'play-the ()
  (for sn (always (rev 0.1))) ;; <- only apply reverb to snare
  (always (lvl 0.3)) ;; set the level
  'beat) 

;; you can also modify the durations this way
(s 'play-the ()
  (for transition (always (dur 2.0 :cfun #'*))) ;; <- halftime !!
  (for sn (always (rev 0.1))) ;; <- only apply reverb to snare
  (always (lvl 0.2)) ;; set the level
  'beat)

;; Alternatively, events may be modified at the source ...
(s 'bass (:sync 'play-the)
  (g 'tri-wave ()
    (n 1 (tri (brownian 100 120) ;; <- define a brownian motion on the pitch param
	      :lvl 0.5 :dur 100
	      :atk 4 :rel 80
	      :lp-freq (oscil 100 1600 :cycle 20))) ;; <- add some oscillation
    (e 1 1 :d 200 :p 100)))


;; Below are some older methods to modify the event stream that I hardly use anymore.

;; Events may be modified on the stream .. this one has the same effect as the
;; one above !
(sink 'ride-the (:sync 'play-the) ;; <- ... and stream to here !
      (s-oscb 'lp-freq 100 1600 :cyc 20) ;; <- add some oscillation on the stream
      (s-brow 'pitch 100 120 :step 1.0) ;; <- add some brownian motion
      (g 'tri-wave ()
	 (n 1 (tri 100 
		   :lvl 0.5 :dur 100
		   :atk 4 :rel 80
		   :lp-freq 500)) 
	 (e 1 1 :d 200 :p 100)))

;; in case of conflict,
;; the function defined on the parameter has precedence ! 
(sink 'ride-the (:sync 'play-the) ;; <- ... and stream to here !
      (s-oscb 'lp-freq 100 1600 :cyc 20) ;; <- add some oscillation on the stream
      (s-brow 'pitch 100 120 :step 1.0) ;; <- this one is ignored ... 
      (g 'tri-wave ()
	 (n 1 (tri (brownian 700 820) ;; <- define a brownian motion here 
		   :lvl 0.5 :dur 100
		   :atk 4 :rel 80
		   :lp-freq 500)) 
	 (e 1 1 :d 200 :p 100)))

(clear)
