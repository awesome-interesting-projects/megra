;; 07 - Event "Arithmetics" and Taxonomy
(in-package :megra)

;; Look at those two events:
(s 'demo-wave ()
   (g 'wave ()
      (n 1 (tri 90 :dur 200 :lvl 0.4))
      (e 1 1 :d 400 :p 100)))

(s 'demo-sn ()
   (g 'snare ()
      (n 1 (sn 'fat :dur 200 :lvl 0.4))
      (e 1 1 :d 400 :p 100)))

;; Even though they sound quite different, they have a lot in common.
;; Both have duration, level, and, if you look at all possible parameters,
;; filter frequencies, attack, decay, etc ...
;; so why not break them down ?

;; volume levels only ...
(s 'demo-levels ()
   (g ' levels ()
     (n 1 (lvl 0.4))
     (n 2 (lvl 0.2))
     (n 3 (lvl 0.6))
     (e 1 2 :d 400 :p 100)
     (e 2 3 :d 400 :p 50)
     (e 2 2 :d 400 :p 50)
     (e 3 1 :d 400 :p 100)))

;; obviously, levels, only won't make any sound ...
;; so we need to combine it with some sound information
;; you might notice that the graph event source is
;; also a stream modifier ... 
(s 'demo-combination ()
  (g 'levels (:combine-mode 'zip) ;; <- notice the zip flag 
    ;; "zip" up the events (by default, they're appended to the event list only)
    (n 1 (lvl 0.4))
    (n 2 (lvl 0.2))
    (n 3 (lvl 0.6))
    (e 1 2 :d 400 :p 100)
    (e 2 3 :d 400 :p 50)
    (e 2 2 :d 400 :p 50)
    (e 3 1 :d 400 :p 100))
  (g 'sound ()
    (n 1 (sine 100))
    (e 1 1 :d 400 :p 100)))

;; you can add some pitch varation in the same way,
;; by mixing in pitch events .. 
(s 'demo-combination ()
   (g 'levels (:combine-mode 'zip)
     (n 1 (lvl 0.4))
     (n 2 (lvl 0.2))
     (n 3 (lvl 0.6))
     (e 1 2 :d 400 :p 100)
     (e 2 3 :d 400 :p 50)
     (e 2 2 :d 400 :p 50)
     (e 3 1 :d 400 :p 100))
   (g 'pitches (:combine-mode 'zip)
     (n 1 (pitch 100))
     (n 2 (pitch 200))
     (n 3 (pitch 240))
     (e 1 2 :d 400 :p 50)
     (e 1 1 :d 400 :p 50)
     (e 2 3 :d 400 :p 50)
     (e 2 2 :d 400 :p 50)
     (e 3 1 :d 400 :p 100))
   (g 'sound ()
     (n 1 (sine 100))
     (e 1 1 :d 400 :p 100)))


;; and maybe some reverb ??
(s 'demo-combination ()
  (g 'revs (:combine-mode 'zip)
     (n 1 (rev 0.2))
     (n 2 (rev 0.1))
     (n 3 (rev 0.0))
     (e 1 1 :d 400 :p 30)
     (e 1 2 :d 400 :p 70)
     (e 2 3 :d 400 :p 100)     
     (e 3 1 :d 400 :p 100))
   (g 'levels (:combine-mode 'zip)
     (n 1 (lvl 0.4))
     (n 2 (lvl 0.2))
     (n 3 (lvl 0.6))
     (e 1 2 :d 400 :p 100)
     (e 2 3 :d 400 :p 50)
     (e 2 2 :d 400 :p 50)
     (e 3 1 :d 400 :p 100))
   (g 'pitches (:combine-mode 'zip)
     (n 1 (pitch 100))
     (n 2 (pitch 200))
     (n 3 (pitch 240))
     (e 1 2 :d 400 :p 50)
     (e 1 1 :d 400 :p 50)
     (e 2 3 :d 400 :p 50)
     (e 2 2 :d 400 :p 50)
     (e 3 1 :d 400 :p 100))
   (g 'sound ()
     (n 1 (saw 100 :lp-freq 500)) ;; <- modified base sound !!
     (e 1 1 :d 400 :p 100)))

;; there's an (incomplete, non sounding) event for just about any
;; parameter of any event. In fact, in the sense of OOP, the (complete, sounding)
;; events inherit their parameters from the non-sounding building blocks, as seen
;; above. If you feel reminded of the serialist paradigm, you're right.

(clear)




