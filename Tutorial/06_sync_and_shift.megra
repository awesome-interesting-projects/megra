;; Synchronization
;; While megra doesn't have a clock or pre-defined tempo running in the background,
;; it's still possible to synchronize musical entities ... 

(in-package :megra)

;; At the last example, a little rhythm group emerged, if you remember.
;; Try to start them, so that a consistent rhythm emerges:

(sink 'drums-sink ()
      (graph 'drums ()
	     (node 1 (bd 'jazzy :lvl 0.9 :lp-dist 0.9 :dur 100))
	     (node 2 (sn 'jazzy :lvl 0.9 :lp-dist 0.9 :dur 100))
	     (edge 1 2 :dur 410 :prob 100)
	     (edge 2 1 :dur 410 :prob 100)))

(sink 'bassline-sink () 
      (graph 'bassline ()
	     (node 1 (tri 'c2 :lvl 0.9 :atk 2 :rel 30 :dur 200 :lp-freq 400))
	     (node 2 (tri 'g2 :lvl 0.9 :atk 2 :rel 30 :dur 200 :lp-freq 400))
	     (edge 1 2 :dur 410 :prob 100)
	     (edge 2 1 :dur 410 :prob 100)))

(sink 'guitar-sink ()
      (graph 'guitar ()
	     (node 1 (git :lvl 0.9
			  :lp-dist 0.9
			  :dur 120
			  :start 0.1 ;; <- start position, relative to the file length
			  :rate 1.0)) ;; <- playback rate ..
	     (edge 1 1 :dur 410 :prob 100)))

(clear)
;; and again !

;; You might have encountered some interesting syncopation, no ?
;; As a matter of fact,
;; there's always some latency when dispathching a graph, and it's not too easy to
;; control. But sometimes (not always), a little precision is desirable, no ?
;; And, it can be achieved:

;; start the drums again:
(sink 'drums-sink ()
      (graph 'drums ()
	     (node 1 (bd 'jazzy :lvl 0.9 :lp-dist 0.9 :dur 100))
	     (node 2 (sn 'jazzy :lvl 0.9 :lp-dist 0.9 :dur 100))
	     (edge 1 2 :dur 410 :prob 100)
	     (edge 2 1 :dur 410 :prob 100)))

;; the solution is rather prosaic:
(sink 'bassline-sink (:sync 'drums-sink) ;; <-- sync to ...
      (graph 'bassline ()
	     (node 1 (tri 'c2 :lvl 0.9 :atk 2 :rel 30 :dur 200 :lp-freq 400))
	     (node 2 (tri 'g2 :lvl 0.9 :atk 2 :rel 30 :dur 200 :lp-freq 400))
	     (edge 1 2 :dur 410 :prob 100)
	     (edge 2 1 :dur 410 :prob 100)))

;; The :sync-to flag makes the current sink wait until the next dispatch
;; of the sink it's synced to. Afterwards, each sink is dispatched on
;; it's own, so if the rhythms match or not is in your hands ! 

;; On a sidenote, now you also know what the (formerly) empty parenthesis
;; are for ... it's a space for additional parameters.

;; In our little polka-example, it would be nice to have an off-beat guitar,
;; no ? The :sync-to flag alone won't help us. We could try free-handed,
;; but we saw already that this is hard ... that's where shift-sync
;; comes into play:

(sink 'guitar-sink (:sync-to 'drums-sink :shift 280) ;;<- sync, but wait for 280ms!
      (graph 'guitar ()
	     (node 1 (git :lvl 0.5
			  :lp-dist 0.9
			  :dur 120
			  :start 0.1 ;; <- start position, relative to the file length
			  :rate 1.0)) ;; <- playback rate ..
	     (edge 1 1 :dur 410 :prob 100)))

(stop 'guitar-sink)

;; When shift-synced, the sink also waits until the sink it is synced to dispatches
;; the next event ... and then some !
;; Play around with the shift time a little, you might
;; notice how the offbeat turns into a swing pattern ... 

;; you might as well use shift without sync,
;; to delay the dispatching by a certain time:

(sink 'guitar-sink (:shift 3000) ;; <-  wait for three seconds ! 
      (graph 'guitar ()
	     (node 1 (grain "git" "git"
			    :lvl 0.5
			    :lp-dist 0.9
			    :dur 120
			    :start 0.1 ;; <- start position, relative to the file length
			    :rate 1.0)) ;; <- playback rate ..
	     (edge 1 1 :dur 410 :prob 100)))

;; if you want to execute some random actions syncronized to the next
;; event of a certain sink, you can use the sync-progn macro ...

(sync-progn 'guitar-sink ;; <- the sink to sync the action to ... 
	    (format t "hi!"))

(stop)
